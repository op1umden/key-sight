import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { AlertTriangle, Download, Copy, Eye } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export interface Vulnerability {
  id: string;
  type: 'r_value_reuse' | 'affine_nonce' | 'weak_signature';
  severity: 'critical' | 'high' | 'medium' | 'low';
  description: string;
  affectedTransactions: string[];
  recoveredKey?: string;
  blockNumber?: number;
  details: Record<string, any>;
}

interface VulnerabilityResultsProps {
  vulnerabilities: Vulnerability[];
  onExport: () => void;
}

export const VulnerabilityResults = ({ vulnerabilities, onExport }: VulnerabilityResultsProps) => {
  const { toast } = useToast();

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'destructive';
      case 'high':
        return 'destructive';
      case 'medium':
        return 'outline';
      case 'low':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'r_value_reuse':
        return 'üîÑ';
      case 'affine_nonce':
        return 'üìê';
      case 'weak_signature':
        return '‚ö†Ô∏è';
      default:
        return 'üîç';
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Data has been copied to your clipboard",
    });
  };

  const formatKey = (key: string | undefined) => {
    if (!key) return 'N/A';
    return `${key.slice(0, 8)}...${key.slice(-8)}`;
  };

  if (vulnerabilities.length === 0) {
    return (
      <Card className="border border-border bg-gradient-to-br from-card to-card/90">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-success" />
            Vulnerability Analysis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <div className="text-6xl mb-4">üõ°Ô∏è</div>
            <h3 className="text-lg font-semibold text-foreground mb-2">No Vulnerabilities Found</h3>
            <p className="text-muted-foreground">
              All analyzed signatures appear to be secure. No nonce reuse or affine relationships detected.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border border-border bg-gradient-to-br from-card to-card/90">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-destructive" />
            Vulnerability Analysis
            <Badge variant="destructive" className="ml-2">
              {vulnerabilities.length} Issues Found
            </Badge>
          </CardTitle>
          <Button 
            onClick={onExport}
            variant="outline"
            size="sm"
            className="flex items-center gap-2"
          >
            <Download className="h-4 w-4" />
            Export Results
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-4 gap-4">
            {(['critical', 'high', 'medium', 'low'] as const).map(severity => {
              const count = vulnerabilities.filter(v => v.severity === severity).length;
              return (
                <div key={severity} className="text-center p-3 rounded-lg bg-muted/50">
                  <div className="text-2xl font-bold text-foreground">{count}</div>
                  <div className="text-sm text-muted-foreground capitalize">{severity}</div>
                </div>
              );
            })}
          </div>

          <div className="rounded-md border border-border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Type</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Block</TableHead>
                  <TableHead>Transactions</TableHead>
                  <TableHead>Recovered Key</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {vulnerabilities.map((vuln) => (
                  <TableRow key={vuln.id}>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <span className="text-lg">{getTypeIcon(vuln.type)}</span>
                        <span className="font-mono text-sm">{vuln.type.replace('_', ' ')}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant={getSeverityColor(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                    </TableCell>
                    <TableCell className="max-w-xs">
                      <div className="truncate" title={vuln.description}>
                        {vuln.description}
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="font-mono text-sm">
                        {vuln.blockNumber?.toLocaleString() || 'N/A'}
                      </span>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline">
                        {vuln.affectedTransactions.length}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {vuln.recoveredKey ? (
                        <div className="flex items-center gap-2">
                          <span className="font-mono text-sm text-destructive">
                            {formatKey(vuln.recoveredKey)}
                          </span>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => copyToClipboard(vuln.recoveredKey || '')}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      ) : (
                        <span className="text-muted-foreground">N/A</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <Button size="sm" variant="ghost">
                        <Eye className="h-4 w-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};